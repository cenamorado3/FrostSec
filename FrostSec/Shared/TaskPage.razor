@inject TasksCapacitor tc

<div class="container mt-4">
    <div class="row mt-4 mobile-shrink">
        <h4 class="col-10" style="text-align:left;">
            @Task.Name
        </h4>
        <h4 class="col-2" style="text-align:right;">
            @Task.ParentBoard-@Task.Id
        </h4>
    </div>

    <div class="row mt-4 mobile-shrink" style="border-bottom:2px solid #154b643d;">
        <div class="col-10">
                <FrostText Text="@Task.Description" TextChanged="UpdateDescription"/>
        </div>
                    
        <div class="col-2">
            <div class="container">
                    <select @oninput="UpdateState">
                        @foreach(string state in tc.States)
                        {
                            @if(Task.State == state)
                            {
                                <option value="@state" selected="selected">@state</option>
                            }
                                @if(Task.State != state)
                            {
                                <option value="@state">@state</option>
                            }
                        }
                    </select>
            </div>
        </div>
    </div>

    <div class="row" style="border-bottom:2px solid #154b643d;">
        <FrostText TextChanged="AddComment" EditOnly="true"/>
    </div>

    <div class="row" >
        @foreach(Comment comment in Task.Comments)
        {
            <FrostComment Comment="@comment" Task="Task"/>
        }
    </div>

</div>

@code{
    [Parameter] public int Id {get;set;}
    [Parameter] public FrostTask Task {get;set;}

    private string _state = "";

    protected override Task OnInitializedAsync()
    {
        if (Task == null && Id > 0)
        {
            Task = tc.Tasks.Where(t => t.Id == Id).First();
        }
        _state = Task.State;
        return base.OnInitializedAsync();
    }

    private void Save()
    {
        if (!string.IsNullOrEmpty(_state))
        {
            tc.AlterTask(Task, _state);
        }
    }


    private void UpdateState(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Task.State = e.Value.ToString();

        }
        StateHasChanged();
    }

    internal void UpdateDescription(string updatedDescription)
    {
        if(!string.IsNullOrEmpty(updatedDescription))
        {
            Task.Description = updatedDescription.ToString();
        }
    }

    internal void AddComment(string newComment)
    {
        if (!string.IsNullOrEmpty(newComment))
        {
            Task.Comments.Insert(0, new() { Id = Task.Comments.Count, Message = newComment.ToString() });
            StateHasChanged();
        }
    }

    private void SaveComment(string newComment)
    {
        if (!string.IsNullOrEmpty(newComment))
        {
            tc.SaveTaskChanges(Task);
            StateHasChanged();
        }
    }
}
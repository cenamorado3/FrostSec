@inject IJSRuntime js
@inject TasksCapacitor tc
<div class="m-4" style="background-color:cornflowerblue;color:white;cursor:pointer" 
draggable="true" @ondragenter="DragStartHandler" @ondragend="DragEndHandler"
data-toggle="modal" data-target="#frost-modal"
@onclick="ToggleEdit"
>
    <div title="@Task.Name" class="text-center"> 
        @Task.Name @Task.State
    </div>
</div>
@if(edit)
{
<div class="modal fade show" id="modal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            </div>
            <div class="modal-body">
                <select @bind="_state">
                    @foreach(string opt in tc.States)
                    {
                        <option value="@opt">@opt</option>        
                    }
                </select>
            </div>
            <div class="modal-footer">
                <button @onclick="Save">Save</button>
            </div>
        </div>
    </div>
</div>
}

@code{
    [Parameter] public FrostTask Task { get; set; }
    [Parameter] public EventCallback<string> StateChanged{ get; set; }

    private bool edit = false;
    private string _state = "";

    private void ToggleEdit()
    {
        edit = !edit;
    }
    private void Save()
    {
        if (!string.IsNullOrEmpty(_state))
        {
            tc.AlterTask(Task, _state);
        }
        ToggleEdit();
        StateChanged.InvokeAsync();
    }

    private void DragStartHandler(DragEventArgs e) 
    {
        Task.IsDragging = true;
    }

    private void DragEndHandler(DragEventArgs e)
    {
        Task.IsDragging = false;
        StateChanged.InvokeAsync();
    }


}

@inject IJSRuntime js
@inject TasksCapacitor tc

<br />
@*can add a priority css with just border left example priority high on the next line *@
<div class="m-auto w-75 task text-center" 
draggable="true" @ondragenter="DragStartHandler" @ondragend="DragEndHandler"
data-toggle="modal" data-target="#frost-modal"
>
    <div class="flex-container">
            <div class="row m-auto mobile-hide" title="@Task.Name" @onclick="ToggleEdit" style="cursor:pointer;">
                <p class="m-auto frost-clip-text">
                    @Task.Name
                </p>
            </div>

            <div class="row mt-4 mobile-hide" @onclick="ToggleEdit" style="cursor:pointer;">
                <div class="status-@Task.State w-75 m-auto frost-clip-text">
                    @Task.State
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-6 mobile-hide">
                    <div style="position:relative;left:1rem;" class="d-md-none d-sm-none d-lg-none d-xl-block">
                        <FrostCheckBox/>
                    </div>
                    <img src="/favicon.png"/>
                    @Task.Points
                </div>

                <div class="col-6 mobile-task">
                    <a href="@Task.ParentBoard/@Task.Id">@Task.Id</a>
                </div>
            </div>
    </div>
</div>



@if(edit)
{
<div class="modal fade show" id="modal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog modal-xl">
        <div class="modal-content modal-xl" style="background-color:@bg;">
            <div class="container">
                <p class="oi oi-x float-end mt-3" @onclick="ToggleEdit"></p>
            </div>
            <div class="modal-body">
                <TaskPage Task="Task"/>
            </div>
        </div>
    </div>
</div>
}


<style>
    .task{
        border:2px solid #462f65;
    }

    .priority-high{
        border-left:10px solid red;
    }

    .status-ToDo{
        background-color:#0197db4f;
        border-radius: 25px;
    }

    .status-Started{
        background-color:#22ec55c2;
        border-radius: 25px;
    }

    .status-Completed{
        background-color:#fcb514;
        border-radius: 25px;
    }

    .task-link{
        position:relative;
        left:6.5rem;
    }
    .task-icons{
        float:left;
        position:relative;
        left:1.5rem;
    }
    .task-interact{
        margin-top:2.5rem;
    }

    textarea{
        resize:none;
    }
</style>



@code{
    [Parameter] public FrostTask Task { get; set; }
    private bool edit = false;
    private string _state = "";
    private string bg = "";
    protected override Task OnInitializedAsync()
    {
        tc.OnChange += StateHandler;
        _state = Task.State;
        return base.OnInitializedAsync();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        BG();
        base.OnAfterRender(firstRender);
    }
    private async void StateHandler()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private void ToggleEdit()
    {
        tc.SaveTaskChanges(Task);
        edit = !edit;
        
    }

    private void DragStartHandler(DragEventArgs e) 
    {
        Task.IsDragging = true;
    }

    private void DragEndHandler(DragEventArgs e)
    {
        Task.IsDragging = false;
    }

    private void TouchStartHandler(TouchEventArgs e) 
    {
        Task.IsDragging = true;
    }

    private void TouchEndHandler(TouchEventArgs e)
    {
        Task.IsDragging = false;
    }


    private async void BG()
    {
        try
        {
            bg = await js.InvokeAsync<string>("GetDarkMode");
            StateHasChanged();
        }
        catch (TaskCanceledException ex)
        {
            //swallow
        }
    }
}

@if (!editText && !string.IsNullOrEmpty(Text))
{
    <p class="frost-text-wrap" @onclick="EditDescription">
        @Text
    </p>
}

@if (editText || string.IsNullOrEmpty(Text))
{
    <textarea placeholder="Add a Comment" @ref="editArea" class="w-100 h-100" rows="@rows" @bind="_textValue" @bind:event="oninput" @onkeyup="CloseDescription" @onfocusout="Close">
        @Text
    </textarea>
}

@code{
    [Parameter]public string Text { get; set; }
    [Parameter]public EventCallback<string> TextChanged { get; set; }



    private string _textValue;
    private bool editText = false;
    private int rows = 5;
    private ElementReference editArea;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender && editText)
        {
            await editArea.FocusAsync();
        }
    }


    private void EditDescription()
    {
        editText = true;
        CalculateRows();
        _textValue = Text;
    }

    private void CloseDescription(KeyboardEventArgs e)
    {
        if(e.Key == "Enter" && !e.ShiftKey)
        {
            TextChanged.InvokeAsync(_textValue);
            Close();
        }
        if(e.Key == "Escape")
        {
            Close();
        }
    }

    private void CalculateRows()
    {
        int temp = (Text.Length / 100);
        if(temp < rows)
        {
            rows = 5;
        }
        if(temp > rows)
        {
            rows = temp + 5;
        }

        if(temp > 30)
        {
            rows = 30;
        }
        StateHasChanged();
    }

    private void Close()
    {
        editText = false;
        StateHasChanged();
    }
}
@inject TasksCapacitor tc
@implements IDisposable

<div class="flex-container m-auto">
    <div class="row mt-4">
    @foreach (string state in tc.States)
    {
        <div class="col-3 m-auto" ondragover="event.preventDefault();">
            <p class="text-center ">@state</p>
            <TasksContainer State="@state">
                @foreach (FrostTask task in tc.Tasks)
                {
                    if(state == task.State)
                    {
                        <TaskComponent Task="task"></TaskComponent>
                    }
                }
            </TasksContainer>
        </div>
    }
     </div>
</div>



@code{
    protected override Task OnInitializedAsync()
    {
        tc.OnChange += StateHandler;
        return base.OnInitializedAsync();
    }

    private async void StateHandler()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        tc.OnChange -= StateHasChanged;
    }
}
@inject TasksCapacitor tc
@implements IDisposable

<div class="flex-container m-auto">
    <div class="row mt-4">
    @foreach (string state in tc.States)
    {
        <div class="col-3 m-auto" ondragover="event.preventDefault();">
            <p class="text-center ">@state</p>
            <TasksContainer State="@state" StateChanged="StateHandler">
                @foreach (FrostTask task in tc.Tasks)
                {
                    if(state == task.State)
                    {
                        <TaskComponent Task="task" StateChanged="StateHandler"></TaskComponent>
                    }
                }
            </TasksContainer>
        </div>
    }
     </div>
</div>



@code{
    protected override Task OnInitializedAsync()
    {
        tc.OnChange += StateHasChanged;
        return base.OnInitializedAsync();
    }
    /// <summary>
    /// Used by the TaskComponenet or any componenet which has DIRECT access to the respective task.
    /// </summary>
    /// <param name="state"></param>
    private void StateHandler(string state)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        tc.OnChange -= StateHasChanged;
    }
}